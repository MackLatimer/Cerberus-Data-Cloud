steps:
  # Test steps for backend services, running in parallel
  - name: 'gcr.io/cloud-builders/docker'
    id: 'test-cerberus-campaigns-backend'
    dir: 'cerberus_campaigns_backend'
    waitFor: ['-']
    args: ['compose', '-f', 'docker-compose.test.yaml', 'up', '--build', '--abort-on-container-exit']

  - name: 'python:3.9-slim'
    id: 'test-cerberus-report-backend'
    dir: 'cerberus_report_backend'
    waitFor: ['-']
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        pip install -r requirements.txt
        pytest

  # Build steps for all services, running in parallel with tests
  - name: 'gcr.io/kaniko-project/executor:latest'
    id: 'build-cerberus-campaigns-backend'
    waitFor: ['-']
    args:
      - --destination=us-south1-docker.pkg.dev/cerberus-data-cloud/cerberus-images/campaigns-api:$SHORT_SHA
      - --cache=true
      - --cache-ttl=24h
      - --context=./cerberus_campaigns_backend
      - --dockerfile=./cerberus_campaigns_backend/Dockerfile

  - name: 'gcr.io/kaniko-project/executor:latest'
    id: 'build-cerberus-report-backend'
    waitFor: ['-']
    args:
      - --destination=us-south1-docker.pkg.dev/cerberus-data-cloud/cerberus-images/agenda-api:$SHORT_SHA
      - --cache=true
      - --cache-ttl=24h
      - --context=./cerberus_report_backend
      - --dockerfile=./cerberus_report_backend/Dockerfile

  - name: 'gcr.io/kaniko-project/executor:latest'
    id: 'build-cerberus-frontend'
    waitFor: ['-']
    args:
      - --destination=us-south1-docker.pkg.dev/cerberus-data-cloud/cerberus-images/cerberus-frontend:$SHORT_SHA
      - --cache=true
      - --cache-ttl=24h
      - --context=./cerberus_frontend
      - --dockerfile=./cerberus_frontend/Dockerfile

  - name: 'gcr.io/kaniko-project/executor:latest'
    id: 'build-emmons-frontend'
    waitFor: ['-']
    args:
      - --destination=us-south1-docker.pkg.dev/cerberus-data-cloud/cerberus-images/emmons-frontend:$SHORT_SHA
      - --cache=true
      - --cache-ttl=24h
      - --context=./emmons_frontend
      - --dockerfile=./emmons_frontend/Dockerfile

  # Run database migrations
  - name: 'gcr.io/google-appengine/exec-wrapper'
    id: 'run-migrations'
    waitFor:
      - 'build-cerberus-campaigns-backend'
      - 'test-cerberus-campaigns-backend'
    args:
      - '-i'
      - 'us-south1-docker.pkg.dev/cerberus-data-cloud/cerberus-images/campaigns-api:$SHORT_SHA'
      - '-s'
      - '$$DB_CONNECTION_NAME'
      - '-e'
      - 'DATABASE_URL=postgresql+psycopg2://$$DB_USER:$$DB_PASS@/$$DB_NAME?host=/cloudsql/$$DB_CONNECTION_NAME'
      - '--'
      - 'flask'
      - 'db'
      - 'upgrade'
    secretEnv: ['DB_USER', 'DB_PASS', 'DB_NAME', 'DB_CONNECTION_NAME']

# List of images to be pushed to Artifact Registry
images:
  - 'us-south1-docker.pkg.dev/cerberus-data-cloud/cerberus-images/campaigns-api:$SHORT_SHA'
  - 'us-south1-docker.pkg.dev/cerberus-data-cloud/cerberus-images/agenda-api:$SHORT_SHA'
  - 'us-south1-docker.pkg.dev/cerberus-data-cloud/cerberus-images/cerberus-frontend:$SHORT_SHA'
  - 'us-south1-docker.pkg.dev/cerberus-data-cloud/cerberus-images/emmons-frontend:$SHORT_SHA'

availableSecrets:
  secretManager:
  - versionName: projects/cerberus-data-cloud/secrets/DB_USER/versions/latest
    env: 'DB_USER'
  - versionName: projects/cerberus-data-cloud/secrets/DB_PASS/versions/latest
    env: 'DB_PASS'
  - versionName: projects/cerberus-data-cloud/secrets/DB_NAME/versions/latest
    env: 'DB_NAME'
  - versionName: projects/cerberus-data-cloud/secrets/DB_CONNECTION_NAME/versions/latest
    env: 'DB_CONNECTION_NAME'

steps:
  # 1. Run backend integration tests
  - name: 'gcr.io/cloud-builders/docker'
    id: 'test-backend'
    dir: 'cerberus_universal_backend'
    args: ['compose', '-f', 'docker-compose.test.yaml', 'up', '--build', '--abort-on-container-exit']

  # 2. Build backend container
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-backend'
    waitFor: ['test-backend']
    args:
      - 'build'
      - '-t'
      - '${_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/${_BACKEND_SERVICE_NAME}:${COMMIT_SHA}'
      - './cerberus_universal_backend'
      - '-f'
      - './cerberus_universal_backend/Dockerfile'

  # 3. Build frontend container
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-frontend'
    args:
      - 'build'
      - '-t'
      - '${_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/${_FRONTEND_SERVICE_NAME}:${COMMIT_SHA}'
      - './emmons_frontend'
      - '-f'
      - './emmons_frontend/Dockerfile'

  # 4. Push containers to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-containers'
    waitFor: ['build-backend', 'build-frontend']
    args: ['push', '--all-tags', '${_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}']

  # 5. Apply database migrations
  - name: 'gcr.io/google-cloud-sdk/gcloud'
    id: 'run-migrations'
    waitFor: ['push-containers']
    entrypoint: gcloud
    args:
      - 'run'
      - 'jobs'
      - 'execute'
      - '${_BACKEND_MIGRATION_JOB_NAME}'
      - '--region'
      - '${_LOCATION}'
      - '--wait'
    # This assumes a pre-configured Cloud Run Job with the necessary secrets
    # and service account to run 'flask db upgrade'.

  # 6. Deploy backend to Cloud Run
  - name: 'gcr.io/google-cloud-sdk/gcloud'
    id: 'deploy-backend'
    waitFor: ['run-migrations']
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - '${_BACKEND_SERVICE_NAME}'
      - '--image'
      - '${_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/${_BACKEND_SERVICE_NAME}:${COMMIT_SHA}'
      - '--region'
      - '${_LOCATION}'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated' # Temporarily for public API parts, can be locked down with API Gateway
      - '--set-secrets=DB_USER=DB_USER:latest,DB_PASS=DB_PASS:latest,DB_NAME=DB_NAME:latest,DB_CONNECTION_NAME=DB_CONNECTION_NAME:latest,SECRET_KEY=SECRET_KEY:latest,PGCRYPTO_SECRET_KEY=PGCRYPTO_SECRET_KEY:latest,STRIPE_SECRET_KEY=STRIPE_SECRET_KEY:latest,STRIPE_WEBHOOK_SECRET=STRIPE_WEBHOOK_SECRET:latest,WEBHOOK_SECRET_KEY=WEBHOOK_SECRET_KEY:latest'

  # 7. Deploy frontend to Cloud Run
  - name: 'gcr.io/google-cloud-sdk/gcloud'
    id: 'deploy-frontend'
    waitFor: ['push-containers']
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - '${_FRONTEND_SERVICE_NAME}'
      - '--image'
      - '${_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/${_FRONTEND_SERVICE_NAME}:${COMMIT_SHA}'
      - '--region'
      - '${_LOCATION}'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'

# Define substitution variables
substitutions:
  _LOCATION: 'us-central1'
  _ARTIFACT_REGISTRY_REPO: 'cerberus-images'
  _BACKEND_SERVICE_NAME: 'cerberus-universal-backend'
  _FRONTEND_SERVICE_NAME: 'cerberus-universal-frontend'
  _BACKEND_MIGRATION_JOB_NAME: 'cerberus-db-migrations'

# Note: The availableSecrets section is removed because secrets are now
# referenced directly in the 'gcloud run deploy' step. This is a newer
# and more direct way to handle secrets for Cloud Run deployments.
